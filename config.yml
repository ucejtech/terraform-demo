version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4
commands:
  install_awscli:
      description: Install AWS CLI v2
      steps:
        - run:
            name: Install AWS CLI v2
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
jobs:
  init:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: Terraform init
          command: |
            cd Project/Infra
            terraform init -input=false
      - persist_to_workspace:
          root: .
          paths:
            - .
  plan:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform plan
          command: |
            cd Project/Infra
            terraform plan -out tfapply 
      - persist_to_workspace:
          root: .
          paths:
            - .

  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform apply
          command: |
            cd Project/Infra
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
      
  plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd Project/Infra
            terraform plan -destroy -out tfdestroy 
      - persist_to_workspace:
          root: .
          paths:
            - .
  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd infra_prov_with_terraform
            terraform apply -auto-approve tfdestroy        
   
  stop:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd Project/Infra
            terraform apply -auto-approve tfdestroy
      
  build-my-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      
      - setup_remote_docker

      - run:
          name: Build Docker image
          command: |
            cd Project/my-app  
            docker build -t django .
      - run:
          name: Push to Docker Hub
          command: |
            cd Project/my-app
            echo "$DOCKER_PASSWORD"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag $APP:latest $DOCKER_USERNAME/$APP
            docker push $DOCKER_USERNAME/$APP
            
  deploy-my-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" Project/kubernetes/*yaml
            kubectl apply -f Project/Kubernetes/
            kubectl get pods
            kubectl get services
            
  sock-shop:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" Project/netes_sock-shop/*yaml
            kubectl create namespace sock-shop
            kubectl apply -f Project/netes_sock-shop/
            kubectl get services -n sock-shop

  prometheus:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" Project/netes_sock-shop/manifests-monitoring/*yaml
            kubectl apply -f Project/netes_sock-shop/manifests-monitoring/      
            
workflows:
  version: 2
  project:
    jobs:
      - prometheus
    #    - init
    #    - plan:
    #        requires: [init]
    #    - hold-apply:
    #        type: approval
    #        requires: [plan]
    #    - apply:
    #        requires: [hold-apply]
    #    - plan-destroy:
    #        requires: [apply]
    #    - hold-destroy:
    #        type: approval
    #        requires: [plan-destroy]
    #    - destroy:
    #        requires: [hold-destroy]  
#       - build-my-app:
 #           requires: [apply]
 #      - deploy-my-app:
 #          requires: [apply]
   #    - sock-shop:
   #        requires: [apply]
        
 #          requires: [apply]